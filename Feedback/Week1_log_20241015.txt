Starting code feedback for Kevin, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.57 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, week1, .git, Feedback

Found the following files in parent directory: README.md, .DS_Store

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
My CMEE Coursework Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: week1, week2

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: code, sandbox, data, results

Found the following files: .DS_Store

Checking for readme file in weekly directory...

README file missing, 1 pt deducted

Current Points = 98

Found following files in results directory: 1802_result.csv, 1800_result.csv, 1801_result.csv, 1803_result.csv, README.md...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 95.5

Found 9 code files: variables.sh, UnixPrac1.txt, CountLines.sh, tabtocsv.sh, csvtospace.sh, tiff2png.sh, MyExampleScript.sh, ConcatenateTwoFiles.sh, boilerplate.sh

Found the following extra files: README.md
0.5 pt deducted per extra file

Current Points = 95.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/sh

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

expr: syntax error: missing argument after ‘+’

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
#For test UnixPrac1.txt using Terminal：we assume apply the cd command to enter the directory containing the .fasta files
#1 Count how many lines there are in each file:
#The * is a wildcard that matches any characters before .fasta and in this case instead 407228326.fasta, 407228412.fasta and E.coli.fasta

wc -l *.fasta

#2 Print everything starting from the second line for the E. coli genome:
#Aim to display from the second line of a file, skipping the first line (which is usually the header information in a FASTA file)

tail -n +2 E.coli.fasta 

#3 Count the sequence length of the E. coli genome:

tail -n +2 E.coli.fasta | tr -d '\n' | wc -c

#4 Count the matches of “ATGC” in the E. coli genome:

tail -n +2 E.coli.fasta | tr -d '\n' | grep -o "ATGC" | wc -l

#5 Compute the AT/GC ratio:
#awk: gsub(/[AT]/,""): Count the total number of A and T. gsub(/[GC]/,""): Count the total number of G and C. print a/g: Output the ratio of (A+T) to (G+C)

tail -n +2 E.coli.fasta | tr -d '\n' | awk '{a=gsub(/[AT]/,""); g=gsub(/[GC]/,""); print a/g}' 

#The above command may runs very slowly and the optimizing the command to improve execution speed shows below, but just an idea
#tail -n +2 E.coli.fasta | tr -d '\n' > temp_seq.txt 
#awk '{a=gsub(/[AT]/,""); g=gsub(/[GC]/,""); print a/g}' temp_seq.txt
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file CountLines.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Check if exactly one argument is provided
if [ $# -ne 1 ]; then # $# represents the number of arguments passed to the script
    echo "Error: Incorrect usage."
    echo "Usage: $0 <InputFile>"
    exit 1
fi

# Check if the input file exists
if [ ! -f "$1" ]; then # $1 refers to the first argument (the file)
    echo "Error: Input file '$1' does not exist."
    exit 1
fi

# Count the number of lines in the file
NumLines=$(wc -l < "$1")

# Output the result and indicate completion
echo "The file $1 has $NumLines lines."
echo "Done!"
exit 0 # Indicate the script completed successfully
**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Incorrect usage.
Usage: CountLines.sh <InputFile>

**********************************************************************

Code ran without errors

Time consumed = 0.00482s

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Kevin Zhao kz1724@ic.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2024

# Check if exactly one argument is provided
if [ $# -ne 1 ]; then # $# represents the number of arguments passed to the script
    echo "Error: Incorrect usage."
    echo "Usage: $0 <InputFile>"
    exit 1
fi

# Check if the input file exists
if [ ! -f "$1" ]; then
    echo "Error: Input file '$1' does not exist."
    exit 1
fi

# Convert tabs to commas and append to a new result file
echo "creating a comma delimited version of $1 ..."
# To avoid creating a file with a path in the ../results directory, basename should be used to extract the file name as path information is included in the $1 file may be path issues
cat $1 | tr -s "\t" "," >> "../results/$(basename "$1").csv" 
echo "Done!"
exit 0 # Indicate the script completed successfully
**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Incorrect usage.
Usage: tabtocsv.sh <InputFile>

**********************************************************************

Code ran without errors

Time consumed = 0.00404s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Check if exactly one argument is provided
if [ $# -ne 1 ]; then # $# represents the number of arguments passed to the script
    echo "Error: Please provide the input filename."
    echo "Usage: $0 <InputCSVFile>"
    exit 1
fi

input_file="$1"

# Check if the input file exists and is readable
if [ ! -f "$input_file" ]; then
    echo "Error: Input file '$input_file' does not exist."
    exit 1
fi

if [ ! -r "$input_file" ]; then
    echo "Error: Input file '$input_file' does not readable."
    exit 1
fi

# Define the output directory and create the output directory automaticlly when 0 output detected
output_dir="../results"
mkdir -p "$output_dir"

# To avoid creating a file with a path in the ../results directory, basename should be used to extract the file name as path information is included in the $1 file may be path issues
# Uses the basename function to get the input file’s base name and Names the output file
base_name=$(basename "$input_file" .csv)
output_file="$output_dir/${base_name}_result.csv"

# Convert CSV to space-separated values and handle any conversion errors
if ! tr ',' ' ' < "$input_file" > "$output_file"; then
    echo "Error: Failed to convert the file."
    exit 1
fi

# Output success message
echo "Successfully converted '$input_file' to '$output_file'"
exit 0

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Please provide the input filename.
Usage: csvtospace.sh <InputCSVFile>

**********************************************************************

Code ran without errors

Time consumed = 0.00381s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash

for f in *.tif; 
    do  
        echo "Converting $f"; 
        convert "$f"  "$(basename "$f" .tif).png"; 
    done
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
Converting *.tif

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

convert-im6.q16: unable to open image `*.tif': No such file or directory @ error/blob.c/OpenBlob/2964.
convert-im6.q16: no images defined `*.png' @ error/convert.c/ConvertImageCommand/3234.

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00356s

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Check if exactly three arguments are provided
if [ $# -ne 3 ]; then # $# represents the number of arguments passed to the script
    echo "Error. Format: $0 <InputFile1> <InputFile2> <OutputFile>"
    exit 1
fi

# Check if the input files exist
for file in "$1" "$2"; do
    if [ ! -f "$file" ]; then
        echo "Error: Input file '$file' does not exist."
        exit 1
    fi
done

# Debug: Display the content of both input files
#echo "File 1 content:"
#cat "$1"
#echo "File 2 content:"
#cat "$2"
#Run above content with scrpt if error disply during two input files and one output file progress

# Concatenate the two input files into the output file
cat "$1" > "$3"
cat "$2" >> "$3"

# Output the merged file content
echo "Merged File is:"
cat "$3"
echo "Done!"
exit 0 # Indicate the script completed successfully
**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Error. Format: ConcatenateTwoFiles.sh <InputFile1> <InputFile2> <OutputFile>

**********************************************************************

Code ran without errors

Time consumed = 0.00344s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Kevin Zhao kz1724@ic.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2024

echo -e "\nThis is a shell script! \n"

#exit
**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00335s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 95.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!